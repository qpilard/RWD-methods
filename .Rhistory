GENDER <- sample(0:1, N, replace = TRUE)  # Binary gender variable
SOCIO_ECO <- sample(1:5, N, replace = TRUE)  # Socioeconomic status categories
SOCIO_ECO_2 <- as.numeric(SOCIO_ECO == 2)  # Dummy variable for SOCIO_ECO == 2
SOCIO_ECO_3 <- as.numeric(SOCIO_ECO == 3)  # Dummy variable for SOCIO_ECO == 3
SOCIO_ECO_4 <- as.numeric(SOCIO_ECO == 4)  # Dummy variable for SOCIO_ECO == 4
SOCIO_ECO_5 <- as.numeric(SOCIO_ECO == 5)  # Dummy variable for SOCIO_ECO == 5
BECK <- pmax(pmin(round(rnorm(N, mean = 30, sd = 9.33)), 63), 0)  # Beck score bounded between 0 and 63
# Utility function to generate binary variables based on a logistic model
logit_prob <- function(eta) {
1 / (1 + exp(-eta))  # Logistic function
}
# Coefficients for predictors
coefficients <- list(
intercept = -1.5,      # Base intercept for treatment assignment
age = -0.04,           # Negative effect of age
gender = -0.3,         # Negative effect of gender (e.g., Female is less likely to be assigned)
beck = 0.1,            # Positive effect of Beck score
socio_eco_2 = -0.10,   # Negative effect for SOCIO_ECO_2
socio_eco_3 = -0.12,   # Negative effect for SOCIO_ECO_3
socio_eco_4 = -0.18,   # Negative effect for SOCIO_ECO_4
socio_eco_5 = -0.25    # Stronger negative effect for SOCIO_ECO_5
)
# Generation of initial treatment (TREAT)
eta_treat <- coefficients$intercept +
coefficients$age * AGE +
coefficients$gender * GENDER +
coefficients$beck * BECK +
coefficients$socio_eco_2 * SOCIO_ECO_2 +
coefficients$socio_eco_3 * SOCIO_ECO_3 +
coefficients$socio_eco_4 * SOCIO_ECO_4 +
coefficients$socio_eco_5 * SOCIO_ECO_5
TREAT <- rbinom(N, 1, logit_prob(eta_treat + rnorm(N)))  # Simulating treatment assignment
# Coefficients for treatment delay based on treatment status
coefficients_delay <- list(
sertralex = list(
intercept = 10,      # Base parameter for delay
age = -0.02,         # Negative effect of age on delay
gender = 0.1,        # Positive effect of gender on delay
beck = -0.05,        # Negative effect of Beck score on delay
socio_eco_2 = 0.2,
socio_eco_3 = 0.15,
socio_eco_4 = 0.1,
socio_eco_5 = 0.05
),
duloxyn = list(
intercept = 15,
age = -0.02,
gender = 0.1,
beck = -0.05,
socio_eco_2 = 0.2,
socio_eco_3 = 0.15,
socio_eco_4 = 0.1,
socio_eco_5 = 0.05
)
)
# Initialization of TIME_TO_TREAT variable
TIME_TO_TREAT <- numeric(N)
# Generation of treatment initiation delays
for (i in 1:N) {
# Select appropriate coefficients
delay_coeffs <- if (TREAT[i] == 1) {
coefficients_delay$sertralex
} else {
coefficients_delay$duloxyn
}
# Compute the mean
linear_pred <- delay_coeffs$intercept +
delay_coeffs$age * AGE[i] +
delay_coeffs$gender * GENDER[i] +
delay_coeffs$beck * BECK[i] +
delay_coeffs$socio_eco_2 * SOCIO_ECO_2[i] +
delay_coeffs$socio_eco_3 * SOCIO_ECO_3[i] +
delay_coeffs$socio_eco_4 * SOCIO_ECO_4[i] +
delay_coeffs$socio_eco_5 * SOCIO_ECO_5[i]
# Generate time from a normal distribution
TIME_TO_TREAT[i] <- round(rnorm(n = 1, mean = linear_pred + rnorm(n = 1), sd = 2.5), 0)
}
# Generation of relapse (EVENT) and time until relapse (TIME_TO_EVENT) in days
base_hazard <- 0.005  # Baseline hazard rate
EVENT <- numeric(N)
TIME_TO_EVENT <- numeric(N)
max_follow_up <- 365  # Maximum follow-up duration in days
coefficients <- list(
intercept = -4,       # Base intercept for event hazard
age = -0.01,          # Younger individuals are more likely to experience PDD
gender = 0.1,         # Women are more likely to experience PDD
socio_eco_2 = -0.05,  # Lower SES is more likely to experience PDD
socio_eco_3 = -0.10,
socio_eco_4 = -0.15,
socio_eco_5 = -0.20,
beck = 0.2,           # Higher Beck score increases the likelihood of PDD
treat = -0.2          # Protective effect of Duloxyn
)
for (i in 1:N) {
eta_event <- coefficients$intercept +
coefficients$age * AGE[i] +
coefficients$gender * GENDER[i] +
coefficients$beck * BECK[i] +
coefficients$socio_eco_2 * SOCIO_ECO_2[i] +
coefficients$socio_eco_3 * SOCIO_ECO_3[i] +
coefficients$socio_eco_4 * SOCIO_ECO_4[i] +
coefficients$socio_eco_5 * SOCIO_ECO_5[i] +
coefficients$treat * TREAT[i]
adjusted_hazard <- base_hazard * exp(eta_event)  # Adjust hazard rate
# Generate time to event in days
TIME_TO_EVENT[i] <- round(rexp(1, rate = adjusted_hazard), 0)
# Ensure EVENT only occurs within 365 days
if (TIME_TO_EVENT[i] < max_follow_up) {
EVENT[i] <- 1
} else {
EVENT[i] <- 0
}
# Ensure TIME_TO_EVENT doesn't exceed the maximum follow-up period
TIME_TO_EVENT[i] <- min(TIME_TO_EVENT[i], max_follow_up)
}
# Organize data in a data frame
data <- data.frame(ID, AGE, GENDER, SOCIO_ECO_2, SOCIO_ECO_3, SOCIO_ECO_4, SOCIO_ECO_5, BECK, TREAT, TIME_TO_EVENT, EVENT, TIME_TO_TREAT)
# Filter data based on conditions
data <- data %>%
filter(TIME_TO_EVENT > TIME_TO_TREAT & TIME_TO_TREAT < 30 & TIME_TO_EVENT > 0)
# Recategorize variables
data$GENDER <- factor(data$GENDER, levels = c(0, 1), labels = c("Male", "Female"))
#data$SOCIO_ECO <- factor(data$SOCIO_ECO, levels = c(1, 2, 3, 4, 5), labels = c("Very low", "Low", "Moderate", "High", "Very high"))
data$TREAT <- factor(data$TREAT, levels = c(0, 1), labels = c("Sertralex", "Duloxyn"))
# Step 1 cloning
# Make a copy of original data
original_data <- data
# Create cloned data
cloned_data <- original_data %>%
mutate(
ID = ID + 1000,                   # Modify ID to differentiate cloned records
TREAT = ifelse(TREAT == "Duloxyn", "Sertralex", "Duloxyn")
)         # Remove TIME_TO_TREAT for clones
# Step 2 censoring
original_data <- original_data %>%
mutate(
CENSOR = 0,                       # Indicator for uncensored data in the original dataset
TIME_TO_CENSOR = TIME_TO_TREAT    # Initial censoring time is set to treatment time
) %>%
select(-TIME_TO_TREAT)               # Remove TIME_TO_TREAT for simplicity
cloned_data <- cloned_data %>%
mutate(
EVENT = 0,                        # No relapse events for cloned records
CENSOR = 1,                       # Cloned records are censored
TIME_TO_CENSOR = TIME_TO_TREAT    # Use TIME_TO_EVENT as censoring time for clones
) %>%
select(-TIME_TO_TREAT)               # Remove TIME_TO_TREAT for clones
# Combine original and cloned datasets
combined_data <- bind_rows(original_data, cloned_data) %>%
mutate(
TIME_TO_EVENT = TIME_TO_EVENT + 0.001,  # Add small increments to avoid duplicate times
TIME_TO_CENSOR = TIME_TO_CENSOR + 0.001, # Add small increments for censoring times
TSTART = 0                              # Set start time for all records
)
# Identify unique times for events and censoring
t_events <- sort(unique(combined_data$TIME_TO_EVENT))  # Unique event times
t_censor <- sort(unique(combined_data$TIME_TO_CENSOR)) # Unique censoring times
# Reshape data for events using survSplit
combined_data_events <- survSplit(
Surv(TSTART, TIME_TO_EVENT, EVENT) ~ .,
data = combined_data,
cut = t_events,
id = "id"
) %>%
rename(TSTOP = TIME_TO_EVENT) %>%
select(ID, TREAT, TSTART, TSTOP, EVENT)    # Keep relevant columns for events
# Reshape data for censoring using survSplit
combined_data_cens <- survSplit(
Surv(TSTART, TIME_TO_CENSOR, CENSOR) ~ .,
data = combined_data,
cut = t_censor,
id = "id"
) %>%
rename(TSTOP = TIME_TO_CENSOR) %>%
select(ID, TREAT, TSTART, TSTOP, CENSOR)
# Extract covariates for the analysis
combined_data_covariate <- combined_data %>%
select(ID, AGE, GENDER, SOCIO_ECO_2, SOCIO_ECO_3, SOCIO_ECO_4, SOCIO_ECO_5, BECK)
# Combine event and censoring datasets
combined_data <- full_join(
combined_data_events,
combined_data_cens,
by = c("ID", "TREAT", "TSTART", "TSTOP")  # Merge by ID, treatment, start, and stop times
) %>%
mutate(
EVENT = ifelse(is.na(EVENT), 0, EVENT),   # Replace missing EVENT values with 0
CENSOR = ifelse(is.na(CENSOR), 0, CENSOR) # Replace missing CENSOR values with 0
) %>%
group_by(ID) %>%
mutate(
censor_cumsum = cumsum(cumsum(CENSOR)),   # Count cumulative censored events per ID
event_cumsum = cumsum(cumsum(EVENT))      # Count cumulative relapse events per ID
) %>%
filter(censor_cumsum <= 1 & event_cumsum <= 1) %>%  # Retain only one censor or event per ID
select(-censor_cumsum, -event_cumsum) %>%
inner_join(combined_data_covariate, by = "ID")
combined_data$TREAT<-factor(combined_data$TREAT,levels=c("Sertralex","Duloxyn"))
combined_data$GENDER<-ifelse(combined_data$GENDER=="Female",1,0)
combined_data_duloxyn <- combined_data %>% filter(TREAT == "Duloxyn")
# Filter data for Duloxyn and estimate censoring probabilities
combined_data_duloxyn <- combined_data %>% filter(TREAT == "Duloxyn")
ms_cens_duloxyn <- coxph(Surv(TSTART, TSTOP, CENSOR) ~ AGE + GENDER + SOCIO_ECO_2 +  SOCIO_ECO_3 + SOCIO_ECO_4 + SOCIO_ECO_5 + BECK,
ties = "efron", data = combined_data_duloxyn)
baseline_hazard <- basehaz(ms_cens_duloxyn, centered = FALSE)
# Étape 3 : Calculer le prédicteur linéaire (lp)
combined_data_duloxyn$lp <- predict(ms_cens_duloxyn, newdata = combined_data_duloxyn, type = "lp")
# Étape 4 : Associer la fonction de risque de base aux temps correspondants
combined_data_duloxyn <- merge(combined_data_duloxyn, baseline_hazard,
by.x = "TSTOP", by.y = "time", all.x = TRUE)
# Étape 5 : Calculer la probabilité non censurée
combined_data_duloxyn$p_uncens <- exp(-combined_data_duloxyn$hazard * exp(combined_data_duloxyn$lp))
# Étape 6 : Calculer les poids
combined_data_duloxyn$weights <- 1 / combined_data_duloxyn$p_uncens
# Filter data for Sertralex and estimate censoring probabilities
combined_data_sertralex <- combined_data %>% filter(TREAT == "Sertralex")
ms_cens_sertralex <- coxph(Surv(TSTART, TSTOP, CENSOR) ~ AGE + GENDER + SOCIO_ECO_2 +  SOCIO_ECO_3 + SOCIO_ECO_4 + SOCIO_ECO_5 + BECK,
ties = "efron", data = combined_data_sertralex)
baseline_hazard <- basehaz(ms_cens_duloxyn, centered = FALSE)
# Étape 3 : Calculer le prédicteur linéaire (lp)
combined_data_sertralex$lp <- predict(ms_cens_sertralex, newdata = combined_data_sertralex, type = "lp")
# Étape 4 : Associer la fonction de risque de base aux temps correspondants
combined_data_sertralex <- merge(combined_data_sertralex, baseline_hazard,
by.x = "TSTOP", by.y = "time", all.x = TRUE)
# Étape 5 : Calculer la probabilité non censurée
combined_data_sertralex$p_uncens <- exp(-combined_data_sertralex$hazard * exp(combined_data_sertralex$lp))
# Étape 6 : Calculer les poids
combined_data_sertralex$weights <- 1 / combined_data_sertralex$p_uncens
# Combine Duloxyn and Sertralex datasets with weights
combined_data <- rbind(combined_data_duloxyn, combined_data_sertralex)
combined_data
# Calculate median survival time
ccw_treatment_0 <- format_median_time(ccw, 1)
combined_data$TREAT <- relevel(combined_data$TREAT,ref="Sertralex")
CCW_cox <- coxph(Surv(TSTART, TSTOP, EVENT) ~ TREAT, data = combined_data, weights = weights)
# Create regression tables
CCW_cox %>%
tbl_regression(exponentiate = TRUE,
label = list(TREAT ~ "Treatment (CCW approach)"))
CCW_cox
# Ensure reproducibility
set.seed(42)
# Number of patients
N <- 800
# Patient IDs
ID <- 1:N
# Generation of base variables
AGE <- pmax(pmin(round(rnorm(N, mean = 32, sd = 6.19)), 80), 18)  # Age bounded between 18 and 80
GENDER <- sample(0:1, N, replace = TRUE)  # Binary gender variable
SOCIO_ECO <- sample(1:5, N, replace = TRUE)  # Socioeconomic status categories
SOCIO_ECO_2 <- as.numeric(SOCIO_ECO == 2)  # Dummy variable for SOCIO_ECO == 2
SOCIO_ECO_3 <- as.numeric(SOCIO_ECO == 3)  # Dummy variable for SOCIO_ECO == 3
SOCIO_ECO_4 <- as.numeric(SOCIO_ECO == 4)  # Dummy variable for SOCIO_ECO == 4
SOCIO_ECO_5 <- as.numeric(SOCIO_ECO == 5)  # Dummy variable for SOCIO_ECO == 5
BECK <- pmax(pmin(round(rnorm(N, mean = 30, sd = 9.33)), 63), 0)  # Beck score bounded between 0 and 63
# Utility function to generate binary variables based on a logistic model
logit_prob <- function(eta) {
1 / (1 + exp(-eta))  # Logistic function
}
# Coefficients for predictors
coefficients <- list(
intercept = -1.5,      # Base intercept for treatment assignment
age = -0.04,           # Negative effect of age
gender = -0.3,         # Negative effect of gender (e.g., Female is less likely to be assigned)
beck = 0.1,            # Positive effect of Beck score
socio_eco_2 = -0.10,   # Negative effect for SOCIO_ECO_2
socio_eco_3 = -0.12,   # Negative effect for SOCIO_ECO_3
socio_eco_4 = -0.18,   # Negative effect for SOCIO_ECO_4
socio_eco_5 = -0.25    # Stronger negative effect for SOCIO_ECO_5
)
# Generation of initial treatment (TREAT)
eta_treat <- coefficients$intercept +
coefficients$age * AGE +
coefficients$gender * GENDER +
coefficients$beck * BECK +
coefficients$socio_eco_2 * SOCIO_ECO_2 +
coefficients$socio_eco_3 * SOCIO_ECO_3 +
coefficients$socio_eco_4 * SOCIO_ECO_4 +
coefficients$socio_eco_5 * SOCIO_ECO_5
TREAT <- rbinom(N, 1, logit_prob(eta_treat + rnorm(N)))  # Simulating treatment assignment
# Coefficients for treatment delay based on treatment status
coefficients_delay <- list(
sertralex = list(
intercept = 10,      # Base parameter for delay
age = -0.02,         # Negative effect of age on delay
gender = 0.1,        # Positive effect of gender on delay
beck = -0.05,        # Negative effect of Beck score on delay
socio_eco_2 = 0.2,
socio_eco_3 = 0.15,
socio_eco_4 = 0.1,
socio_eco_5 = 0.05
),
duloxyn = list(
intercept = 15,
age = -0.02,
gender = 0.1,
beck = -0.05,
socio_eco_2 = 0.2,
socio_eco_3 = 0.15,
socio_eco_4 = 0.1,
socio_eco_5 = 0.05
)
)
# Initialization of TIME_TO_TREAT variable
TIME_TO_TREAT <- numeric(N)
# Generation of treatment initiation delays
for (i in 1:N) {
# Select appropriate coefficients
delay_coeffs <- if (TREAT[i] == 1) {
coefficients_delay$sertralex
} else {
coefficients_delay$duloxyn
}
# Compute the mean
linear_pred <- delay_coeffs$intercept +
delay_coeffs$age * AGE[i] +
delay_coeffs$gender * GENDER[i] +
delay_coeffs$beck * BECK[i] +
delay_coeffs$socio_eco_2 * SOCIO_ECO_2[i] +
delay_coeffs$socio_eco_3 * SOCIO_ECO_3[i] +
delay_coeffs$socio_eco_4 * SOCIO_ECO_4[i] +
delay_coeffs$socio_eco_5 * SOCIO_ECO_5[i]
# Generate time from a normal distribution
TIME_TO_TREAT[i] <- round(rnorm(n = 1, mean = linear_pred + rnorm(n = 1), sd = 2.5), 0)
}
# Generation of relapse (EVENT) and time until relapse (TIME_TO_EVENT) in days
base_hazard <- 0.005  # Baseline hazard rate
EVENT <- numeric(N)
TIME_TO_EVENT <- numeric(N)
max_follow_up <- 365  # Maximum follow-up duration in days
coefficients <- list(
intercept = -4,       # Base intercept for event hazard
age = -0.01,          # Younger individuals are more likely to experience PDD
gender = 0.1,         # Women are more likely to experience PDD
socio_eco_2 = -0.05,  # Lower SES is more likely to experience PDD
socio_eco_3 = -0.10,
socio_eco_4 = -0.15,
socio_eco_5 = -0.20,
beck = 0.2,           # Higher Beck score increases the likelihood of PDD
treat = -0.2          # Protective effect of Duloxyn
)
for (i in 1:N) {
eta_event <- coefficients$intercept +
coefficients$age * AGE[i] +
coefficients$gender * GENDER[i] +
coefficients$beck * BECK[i] +
coefficients$socio_eco_2 * SOCIO_ECO_2[i] +
coefficients$socio_eco_3 * SOCIO_ECO_3[i] +
coefficients$socio_eco_4 * SOCIO_ECO_4[i] +
coefficients$socio_eco_5 * SOCIO_ECO_5[i] +
coefficients$treat * TREAT[i]
adjusted_hazard <- base_hazard * exp(eta_event)  # Adjust hazard rate
# Generate time to event in days
TIME_TO_EVENT[i] <- round(rexp(1, rate = adjusted_hazard), 0)
# Ensure EVENT only occurs within 365 days
if (TIME_TO_EVENT[i] < max_follow_up) {
EVENT[i] <- 1
} else {
EVENT[i] <- 0
}
# Ensure TIME_TO_EVENT doesn't exceed the maximum follow-up period
TIME_TO_EVENT[i] <- min(TIME_TO_EVENT[i], max_follow_up)
}
# Organize data in a data frame
data <- data.frame(ID, AGE, GENDER, SOCIO_ECO, BECK, TREAT, TIME_TO_EVENT, EVENT, TIME_TO_TREAT)
# Filter data based on conditions
data <- data %>%
filter(TIME_TO_EVENT > TIME_TO_TREAT & TIME_TO_TREAT < 30 & TIME_TO_EVENT > 0)
# Recategorize variables
data$GENDER <- factor(data$GENDER, levels = c(0, 1), labels = c("Male", "Female"))
data$SOCIO_ECO <- factor(data$SOCIO_ECO, levels = c(1, 2, 3, 4, 5), labels = c("Very low", "Low", "Moderate", "High", "Very high"))
data$TREAT <- factor(data$TREAT, levels = c(0, 1), labels = c("Sertralex", "Duloxyn"))
data
# Ensure reproducibility
set.seed(42)
# Number of patients
N <- 800
# Patient IDs
ID <- 1:N
# Generation of base variables
AGE <- pmax(pmin(round(rnorm(N, mean = 32, sd = 6.19)), 80), 18)  # Age bounded between 18 and 80
GENDER <- sample(0:1, N, replace = TRUE)  # Binary gender variable
SOCIO_ECO <- sample(1:5, N, replace = TRUE)  # Socioeconomic status categories
SOCIO_ECO_2 <- as.numeric(SOCIO_ECO == 2)  # Dummy variable for SOCIO_ECO == 2
SOCIO_ECO_3 <- as.numeric(SOCIO_ECO == 3)  # Dummy variable for SOCIO_ECO == 3
SOCIO_ECO_4 <- as.numeric(SOCIO_ECO == 4)  # Dummy variable for SOCIO_ECO == 4
SOCIO_ECO_5 <- as.numeric(SOCIO_ECO == 5)  # Dummy variable for SOCIO_ECO == 5
BECK <- pmax(pmin(round(rnorm(N, mean = 30, sd = 9.33)), 63), 0)  # Beck score bounded between 0 and 63
# Utility function to generate binary variables based on a logistic model
logit_prob <- function(eta) {
1 / (1 + exp(-eta))  # Logistic function
}
# Coefficients for predictors
coefficients <- list(
intercept = -1.5,      # Base intercept for treatment assignment
age = -0.04,           # Negative effect of age
gender = -0.3,         # Negative effect of gender (e.g., Female is less likely to be assigned)
beck = 0.1,            # Positive effect of Beck score
socio_eco_2 = -0.10,   # Negative effect for SOCIO_ECO_2
socio_eco_3 = -0.12,   # Negative effect for SOCIO_ECO_3
socio_eco_4 = -0.18,   # Negative effect for SOCIO_ECO_4
socio_eco_5 = -0.25    # Stronger negative effect for SOCIO_ECO_5
)
# Generation of initial treatment (TREAT)
eta_treat <- coefficients$intercept +
coefficients$age * AGE +
coefficients$gender * GENDER +
coefficients$beck * BECK +
coefficients$socio_eco_2 * SOCIO_ECO_2 +
coefficients$socio_eco_3 * SOCIO_ECO_3 +
coefficients$socio_eco_4 * SOCIO_ECO_4 +
coefficients$socio_eco_5 * SOCIO_ECO_5
TREAT <- rbinom(N, 1, logit_prob(eta_treat + rnorm(N)))  # Simulating treatment assignment
# Coefficients for treatment delay based on treatment status
coefficients_delay <- list(
sertralex = list(
intercept = 10,      # Base parameter for delay
age = -0.02,         # Negative effect of age on delay
gender = 0.1,        # Positive effect of gender on delay
beck = -0.05,        # Negative effect of Beck score on delay
socio_eco_2 = 0.2,
socio_eco_3 = 0.15,
socio_eco_4 = 0.1,
socio_eco_5 = 0.05
),
duloxyn = list(
intercept = 15,
age = -0.02,
gender = 0.1,
beck = -0.05,
socio_eco_2 = 0.2,
socio_eco_3 = 0.15,
socio_eco_4 = 0.1,
socio_eco_5 = 0.05
)
)
# Initialization of TIME_TO_TREAT variable
TIME_TO_TREAT <- numeric(N)
# Generation of treatment initiation delays
for (i in 1:N) {
# Select appropriate coefficients
delay_coeffs <- if (TREAT[i] == 1) {
coefficients_delay$sertralex
} else {
coefficients_delay$duloxyn
}
# Compute the mean
linear_pred <- delay_coeffs$intercept +
delay_coeffs$age * AGE[i] +
delay_coeffs$gender * GENDER[i] +
delay_coeffs$beck * BECK[i] +
delay_coeffs$socio_eco_2 * SOCIO_ECO_2[i] +
delay_coeffs$socio_eco_3 * SOCIO_ECO_3[i] +
delay_coeffs$socio_eco_4 * SOCIO_ECO_4[i] +
delay_coeffs$socio_eco_5 * SOCIO_ECO_5[i]
# Generate time from a normal distribution
TIME_TO_TREAT[i] <- round(rnorm(n = 1, mean = linear_pred + rnorm(n = 1), sd = 2.5), 0)
}
# Generation of relapse (EVENT) and time until relapse (TIME_TO_EVENT) in days
base_hazard <- 0.005  # Baseline hazard rate
EVENT <- numeric(N)
TIME_TO_EVENT <- numeric(N)
max_follow_up <- 365  # Maximum follow-up duration in days
coefficients <- list(
intercept = -4,       # Base intercept for event hazard
age = -0.01,          # Younger individuals are more likely to experience PDD
gender = 0.1,         # Women are more likely to experience PDD
socio_eco_2 = -0.05,  # Lower SES is more likely to experience PDD
socio_eco_3 = -0.10,
socio_eco_4 = -0.15,
socio_eco_5 = -0.20,
beck = 0.2,           # Higher Beck score increases the likelihood of PDD
treat = -0.2          # Protective effect of Duloxyn
)
for (i in 1:N) {
eta_event <- coefficients$intercept +
coefficients$age * AGE[i] +
coefficients$gender * GENDER[i] +
coefficients$beck * BECK[i] +
coefficients$socio_eco_2 * SOCIO_ECO_2[i] +
coefficients$socio_eco_3 * SOCIO_ECO_3[i] +
coefficients$socio_eco_4 * SOCIO_ECO_4[i] +
coefficients$socio_eco_5 * SOCIO_ECO_5[i] +
coefficients$treat * TREAT[i]
adjusted_hazard <- base_hazard * exp(eta_event)  # Adjust hazard rate
# Generate time to event in days
TIME_TO_EVENT[i] <- round(rexp(1, rate = adjusted_hazard), 0)
# Ensure EVENT only occurs within 365 days
if (TIME_TO_EVENT[i] < max_follow_up) {
EVENT[i] <- 1
} else {
EVENT[i] <- 0
}
# Ensure TIME_TO_EVENT doesn't exceed the maximum follow-up period
TIME_TO_EVENT[i] <- min(TIME_TO_EVENT[i], max_follow_up)
}
# Organize data in a data frame
data <- data.frame(ID, AGE, GENDER, SOCIO_ECO, SOCIO_ECO_2, SOCIO_ECO_3, SOCIO_ECO_4, SOCIO_ECO_5, BECK, TREAT, TIME_TO_EVENT, EVENT, TIME_TO_TREAT)
# Filter data based on conditions
data <- data %>%
filter(TIME_TO_EVENT > TIME_TO_TREAT & TIME_TO_TREAT < 30 & TIME_TO_EVENT > 0)
# Recategorize variables
data$GENDER <- factor(data$GENDER, levels = c(0, 1), labels = c("Male", "Female"))
data$SOCIO_ECO <- factor(data$SOCIO_ECO, levels = c(1, 2, 3, 4, 5), labels = c("Very low", "Low", "Moderate", "High", "Very high"))
data$TREAT <- factor(data$TREAT, levels = c(0, 1), labels = c("Sertralex", "Duloxyn"))
original_data <- data
original_data <- original_data %>%
mutate(SOCIO_ECO_2 = ifelse(SOCIO_ECO == "Low", 1, 0),
SOCIO_ECO_3 = ifelse(SOCIO_ECO == "Moderate", 1, 0),
SOCIO_ECO_4 = ifelse(SOCIO_ECO == "High", 1, 0),
SOCIO_ECO_5 = ifelse(SOCIO_ECO == "Very high", 1, 0)) %>%
select(-SOCIO_ECO)
original_data
